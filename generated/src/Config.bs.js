// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Abis = require("./Abis.bs.js");
var Ethers = require("./bindings/Ethers.bs.js");
var Ethers$1 = require("ethers");
var EnvSafe = require("rescript-envsafe/src/EnvSafe.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var EnvUtils = require("./EnvUtils.bs.js");
var S$RescriptStruct = require("rescript-struct/src/S.bs.js");

var envSafe = EnvSafe.make(undefined, undefined);

function getLogLevelConfig(name, $$default) {
  return EnvSafe.get(envSafe, name, S$RescriptStruct.union([
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "trace"
                      }, "trace"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "debug"
                      }, "debug"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "info"
                      }, "info"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "warn"
                      }, "warn"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "error"
                      }, "error"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "fatal"
                      }, "fatal"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "udebug"
                      }, "udebug"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "uinfo"
                      }, "uinfo"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "uwarn"
                      }, "uwarn"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: "uerror"
                      }, "uerror"),
                  S$RescriptStruct.literalVariant({
                        TAG: /* String */0,
                        _0: ""
                      }, $$default),
                  S$RescriptStruct.literalVariant(/* EmptyOption */1, $$default)
                ]), undefined, undefined, undefined, undefined);
}

var logFilePath = EnvSafe.get(envSafe, "LOG_FILE", S$RescriptStruct.string(undefined), undefined, "logs/envio.log", undefined, undefined);

var userLogLevel = getLogLevelConfig("LOG_LEVEL", "info");

var defaultFileLogLevel = getLogLevelConfig("FILE_LOG_LEVEL", "trace");

var logStrategy = EnvSafe.get(envSafe, "LOG_STRATEGY", S$RescriptStruct.union([
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: "ecs-file"
              }, /* EcsFile */0),
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: "ecs-console"
              }, /* EcsConsole */1),
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: "file-only"
              }, /* FileOnly */2),
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: "console-raw"
              }, /* ConsoleRaw */3),
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: "console-pretty"
              }, /* ConsolePretty */4),
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: "both-prettyconsole"
              }, /* Both */5),
          S$RescriptStruct.literalVariant({
                TAG: /* String */0,
                _0: ""
              }, /* ConsolePretty */4),
          S$RescriptStruct.literalVariant(/* EmptyOption */1, /* ConsolePretty */4)
        ]), undefined, undefined, undefined, undefined);

var db_host = EnvSafe.get(envSafe, "PG_HOST", S$RescriptStruct.string(undefined), undefined, "localhost", undefined, undefined);

var db_port = EnvSafe.get(envSafe, "PG_PORT", S$RescriptStruct.Int.port(S$RescriptStruct.$$int(undefined), undefined, undefined), undefined, 5432, undefined, undefined);

var db_user = EnvSafe.get(envSafe, "PG_USER", S$RescriptStruct.string(undefined), undefined, "postgres", undefined, undefined);

var db_password = EnvSafe.get(envSafe, "PG_PASSWORD", S$RescriptStruct.string(undefined), undefined, "testing", undefined, undefined);

var db_database = EnvSafe.get(envSafe, "PG_DATABASE", S$RescriptStruct.string(undefined), undefined, "envio-dev", undefined, undefined);

var db_ssl = EnvSafe.get(envSafe, "SSL_MODE", S$RescriptStruct.string(undefined), undefined, false, undefined, undefined);

var db_onnotice = userLogLevel === "warn" || userLogLevel === "error" ? undefined : (function (param) {
      
    });

var db = {
  host: db_host,
  port: db_port,
  user: db_user,
  password: db_password,
  database: db_database,
  ssl: db_ssl,
  onnotice: db_onnotice
};

var config = Js_dict.fromArray([[
        "1337",
        {
          syncSource: {
            TAG: /* Rpc */0,
            _0: {
              provider: Ethers.JsonRpcProvider.makeStatic("http://localhost:8545", 1337),
              syncConfig: {
                initialBlockInterval: EnvUtils.getIntEnvVar(10000, envSafe, "UNSTABLE__SYNC_CONFIG_INITIAL_BLOCK_INTERVAL"),
                backoffMultiplicative: EnvUtils.getFloatEnvVar(0.8, envSafe, "UNSTABLE__SYNC_CONFIG_BACKOFF_MULTIPLICATIVE"),
                accelerationAdditive: EnvUtils.getIntEnvVar(2000, envSafe, "UNSTABLE__SYNC_CONFIG_ACCELERATION_ADDITIVE"),
                intervalCeiling: EnvUtils.getIntEnvVar(10000, envSafe, "UNSTABLE__SYNC_CONFIG_INTERVAL_CEILING"),
                backoffMillis: 5000,
                queryTimeoutMillis: 20000
              }
            }
          },
          startBlock: 0,
          chainId: 1337,
          contracts: [{
              name: "MyAwesomeContract",
              abi: Ethers.makeAbi(Abis.myAwesomeContractAbi),
              addresses: [Ethers$1.ethers.getAddress("0x0000000000000000000000000000000000000000")],
              events: [/* MyAwesomeContractContract_AwesomeEventEvent */0]
            }]
        }
      ]]);

var metricsPort = EnvSafe.get(envSafe, "METRICS_PORT", S$RescriptStruct.Int.port(S$RescriptStruct.$$int(undefined), undefined, undefined), undefined, 9898, undefined, undefined);

EnvSafe.close(envSafe, undefined);

exports.getLogLevelConfig = getLogLevelConfig;
exports.logFilePath = logFilePath;
exports.userLogLevel = userLogLevel;
exports.defaultFileLogLevel = defaultFileLogLevel;
exports.logStrategy = logStrategy;
exports.db = db;
exports.config = config;
exports.metricsPort = metricsPort;
/* envSafe Not a pure module */
