// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.bs.js");
var Config = require("./Config.bs.js");
var Ethers = require("./bindings/Ethers.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Logging = require("./Logging.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Postgres = require("postgres");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_Result = require("rescript/lib/js/belt_Result.js");
var DbFunctionsImplementationJs = require("./DbFunctionsImplementation.js");

var newrecord = Caml_obj.obj_dup(Config.db);

newrecord.transform = {
  undefined: null
};

var sql = Postgres(newrecord);

function batchSetRawEvents(prim0, prim1) {
  return DbFunctionsImplementationJs.batchSetRawEvents(prim0, prim1);
}

function batchDeleteRawEvents(prim0, prim1) {
  return DbFunctionsImplementationJs.batchDeleteRawEvents(prim0, prim1);
}

function readRawEventsEntities(prim0, prim1) {
  return DbFunctionsImplementationJs.readRawEventsEntities(prim0, prim1);
}

function getRawEventsPageGtOrEqEventId(prim0, prim1, prim2, prim3, prim4) {
  return DbFunctionsImplementationJs.getRawEventsPageGtOrEqEventId(prim0, prim1, prim2, prim3, prim4);
}

function getRawEventsPageWithinEventIdRangeInclusive(prim0, prim1, prim2, prim3, prim4, prim5) {
  return DbFunctionsImplementationJs.getRawEventsPageWithinEventIdRangeInclusive(prim0, prim1, prim2, prim3, prim4, prim5);
}

function readLatestRawEventsBlockNumberProcessedOnChainId(prim0, prim1) {
  return DbFunctionsImplementationJs.readLatestRawEventsBlockNumberProcessedOnChainId(prim0, prim1);
}

async function getLatestProcessedBlockNumber(chainId) {
  var row = await DbFunctionsImplementationJs.readLatestRawEventsBlockNumberProcessedOnChainId(sql, chainId);
  return Belt_Option.map(Belt_Array.get(row, 0), (function (row) {
                return row.block_number;
              }));
}

var RawEvents = {
  batchSetRawEvents: batchSetRawEvents,
  batchDeleteRawEvents: batchDeleteRawEvents,
  readRawEventsEntities: readRawEventsEntities,
  getRawEventsPageGtOrEqEventId: getRawEventsPageGtOrEqEventId,
  getRawEventsPageWithinEventIdRangeInclusive: getRawEventsPageWithinEventIdRangeInclusive,
  readLatestRawEventsBlockNumberProcessedOnChainId: readLatestRawEventsBlockNumberProcessedOnChainId,
  getLatestProcessedBlockNumber: getLatestProcessedBlockNumber
};

function batchSetDynamicContractRegistry(prim0, prim1) {
  return DbFunctionsImplementationJs.batchSetDynamicContractRegistry(prim0, prim1);
}

function batchDeleteDynamicContractRegistry(prim0, prim1) {
  return DbFunctionsImplementationJs.batchDeleteDynamicContractRegistry(prim0, prim1);
}

function readDynamicContractRegistryEntities(prim0, prim1) {
  return DbFunctionsImplementationJs.readDynamicContractRegistryEntities(prim0, prim1);
}

function readDynamicContractsOnChainIdAtOrBeforeBlock(prim0, prim1, prim2) {
  return DbFunctionsImplementationJs.readDynamicContractsOnChainIdAtOrBeforeBlock(prim0, prim1, prim2);
}

var DynamicContractRegistry = {
  batchSetDynamicContractRegistry: batchSetDynamicContractRegistry,
  batchDeleteDynamicContractRegistry: batchDeleteDynamicContractRegistry,
  readDynamicContractRegistryEntities: readDynamicContractRegistryEntities,
  readDynamicContractsOnChainIdAtOrBeforeBlock: readDynamicContractsOnChainIdAtOrBeforeBlock
};

function awesomeEntityReadRow_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "awesomeAddress",
                    false,
                    Spice.stringToJson(v.awesomeAddress)
                  ],
                  [
                    "awesomeTotal",
                    false,
                    Ethers.$$BigInt.t_encode(v.awesomeTotal)
                  ],
                  [
                    "event_chain_id",
                    false,
                    Spice.intToJson(v.chainId)
                  ],
                  [
                    "event_id",
                    false,
                    Ethers.$$BigInt.t_encode(v.eventId)
                  ]
                ]));
}

function awesomeEntityReadRow_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var awesomeAddress = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "awesomeAddress"), null));
    if (awesomeAddress.TAG === /* Ok */0) {
      var awesomeTotal = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "awesomeTotal"), null));
      if (awesomeTotal.TAG === /* Ok */0) {
        var chainId = Spice.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "event_chain_id"), null));
        if (chainId.TAG === /* Ok */0) {
          var eventId = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "event_id"), null));
          if (eventId.TAG === /* Ok */0) {
            return {
                    TAG: /* Ok */0,
                    _0: {
                      id: id._0,
                      awesomeAddress: awesomeAddress._0,
                      awesomeTotal: awesomeTotal._0,
                      chainId: chainId._0,
                      eventId: eventId._0
                    }
                  };
          }
          var e = eventId._0;
          return {
                  TAG: /* Error */1,
                  _0: {
                    path: "." + ("event_id" + e.path),
                    message: e.message,
                    value: e.value
                  }
                };
        }
        var e$1 = chainId._0;
        return {
                TAG: /* Error */1,
                _0: {
                  path: "." + ("event_chain_id" + e$1.path),
                  message: e$1.message,
                  value: e$1.value
                }
              };
      }
      var e$2 = awesomeTotal._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".awesomeTotal" + e$2.path,
                message: e$2.message,
                value: e$2.value
              }
            };
    }
    var e$3 = awesomeAddress._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".awesomeAddress" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var e$4 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$4.path,
            message: e$4.message,
            value: e$4.value
          }
        };
}

function readRowToReadEntityData(readRowJson) {
  var v = awesomeEntityReadRow_decode(readRowJson);
  var tmp;
  if (v.TAG === /* Ok */0) {
    tmp = {
      TAG: /* Ok */0,
      _0: v._0
    };
  } else {
    var e = v._0;
    Logging.error({
          err: e,
          msg: "EE700: Unable to parse row from database of entity awesomeEntity using spice",
          raw_unparsed_object: readRowJson
        });
    tmp = {
      TAG: /* Error */1,
      _0: e
    };
  }
  var readRow = Belt_Result.getExn(tmp);
  return {
          entity: {
            id: readRow.id,
            awesomeAddress: readRow.awesomeAddress,
            awesomeTotal: readRow.awesomeTotal
          },
          eventData: {
            event_chain_id: readRow.chainId,
            event_id: readRow.eventId.toString()
          }
        };
}

function batchSetAwesomeEntity(prim0, prim1) {
  return DbFunctionsImplementationJs.batchSetAwesomeEntity(prim0, prim1);
}

function batchDeleteAwesomeEntity(prim0, prim1) {
  return DbFunctionsImplementationJs.batchDeleteAwesomeEntity(prim0, prim1);
}

function readAwesomeEntityEntities(prim0, prim1) {
  return DbFunctionsImplementationJs.readAwesomeEntityEntities(prim0, prim1);
}

var AwesomeEntity = {
  awesomeEntityReadRow_encode: awesomeEntityReadRow_encode,
  awesomeEntityReadRow_decode: awesomeEntityReadRow_decode,
  readRowToReadEntityData: readRowToReadEntityData,
  batchSetAwesomeEntity: batchSetAwesomeEntity,
  batchDeleteAwesomeEntity: batchDeleteAwesomeEntity,
  readAwesomeEntityEntities: readAwesomeEntityEntities
};

var config = newrecord;

exports.config = config;
exports.sql = sql;
exports.RawEvents = RawEvents;
exports.DynamicContractRegistry = DynamicContractRegistry;
exports.AwesomeEntity = AwesomeEntity;
/*  Not a pure module */
