// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var IO = require("./IO.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Logging = require("./Logging.bs.js");
var EventUtils = require("./EventUtils.bs.js");

function contextCreator(inMemoryStore, chainId, $$event, logger) {
  var logger$1 = Logging.createChildFrom(logger, {
        userLog: "MyAwesomeContract.AwesomeEvent.context"
      });
  var optSetOfIds_awesomeEntity = new Set();
  var entitiesToLoad = [];
  var addedDynamicContractRegistrations = [];
  var loaderContext_contractRegistration = {
    addMyAwesomeContract: (function (contractAddress) {
        var eventId = EventUtils.packEventIndex($$event.blockNumber, $$event.logIndex);
        var dynamicContractRegistration = {
          chain_id: chainId,
          event_id: eventId,
          contract_address: contractAddress,
          contract_type: "MyAwesomeContract"
        };
        addedDynamicContractRegistrations.push(dynamicContractRegistration);
        Curry._5(IO.InMemoryStore.DynamicContractRegistry.set, inMemoryStore.dynamicContractRegistry, {
              chainId: chainId,
              contractAddress: contractAddress
            }, {
              event_chain_id: chainId,
              event_id: eventId.toString()
            }, /* Set */1, dynamicContractRegistration);
      })
  };
  var loaderContext_awesomeEntity = {
    load: (function (id) {
        optSetOfIds_awesomeEntity.add(id);
        entitiesToLoad.push(/* AwesomeEntityRead */{
              _0: id
            });
      })
  };
  var loaderContext = {
    contractRegistration: loaderContext_contractRegistration,
    awesomeEntity: loaderContext_awesomeEntity
  };
  return {
          getLoaderContext: (function (param) {
              return loaderContext;
            }),
          getContext: (function (eventData, param) {
              return {
                      log: {
                        debug: (function (message) {
                            logger$1.udebug(message);
                          }),
                        info: (function (message) {
                            logger$1.uinfo(message);
                          }),
                        warn: (function (message) {
                            logger$1.uwarn(message);
                          }),
                        error: (function (message) {
                            logger$1.uerror(message);
                          }),
                        errorWithExn: (function (exn, message) {
                            logger$1.uerror(exn, message);
                          })
                      },
                      awesomeEntity: {
                        get: (function (id) {
                            if (optSetOfIds_awesomeEntity.has(id)) {
                              return Curry._2(IO.InMemoryStore.AwesomeEntity.get, inMemoryStore.awesomeEntity, id);
                            } else {
                              Logging.warn("The loader for a \"AwesomeEntity\" of entity with id \"" + id + "\" was not used please add it to your default loader function (ie. place 'context.awesomeEntity.load(\"" + id + "\")' inside your loader) to avoid unexpected behaviour. This is a runtime validation check.");
                              return Curry._2(IO.InMemoryStore.AwesomeEntity.get, inMemoryStore.awesomeEntity, id);
                            }
                          }),
                        set: (function (entity) {
                            Curry._5(IO.InMemoryStore.AwesomeEntity.set, inMemoryStore.awesomeEntity, entity.id, eventData, /* Set */1, entity);
                          }),
                        delete: (function (id) {
                            Logging.warn("[unimplemented delete] can't delete entity(awesomeEntity) with ID " + id + ".");
                          })
                      }
                    };
            }),
          getEntitiesToLoad: (function (param) {
              return entitiesToLoad;
            }),
          getAddedDynamicContractRegistrations: (function (param) {
              return addedDynamicContractRegistrations;
            })
        };
}

var AwesomeEventEvent = {
  contextCreator: contextCreator
};

var MyAwesomeContractContract = {
  AwesomeEventEvent: AwesomeEventEvent
};

exports.MyAwesomeContractContract = MyAwesomeContractContract;
/* IO Not a pure module */
