// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Logging = require("./Logging.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function mapFunctionRegisterName(functionRegister) {
  if (functionRegister) {
    return "Handler";
  } else {
    return "Loader";
  }
}

var hasPrintedWarning = new Set();

function getDefaultLoaderHandler(functionRegister, eventName, param, param$1) {
  var functionName = functionRegister ? "Handler" : "Loader";
  var repeatKey = "" + eventName + "-" + functionName + "";
  if (!hasPrintedWarning.has(repeatKey)) {
    Logging.warn("Ignored " + eventName + " event, as there is no " + functionName + " registered. You need to implement a " + eventName + "" + functionName + " method in your handler file. This will apply to all future " + eventName + " events.");
    hasPrintedWarning.add(repeatKey);
    return ;
  }
  
}

var awesomeEventLoader = {
  contents: undefined
};

var awesomeEventHandler = {
  contents: undefined
};

function loader(userLoader) {
  awesomeEventLoader.contents = userLoader;
}

function handler(userHandler) {
  awesomeEventHandler.contents = userHandler;
}

function getLoader(param) {
  return Belt_Option.getWithDefault(awesomeEventLoader.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Loader */0, "AwesomeEvent", param, param$1);
              }));
}

function getHandler(param) {
  return Belt_Option.getWithDefault(awesomeEventHandler.contents, (function (param, param$1) {
                return getDefaultLoaderHandler(/* Handler */1, "AwesomeEvent", param, param$1);
              }));
}

var AwesomeEvent = {
  loader: loader,
  handler: handler,
  getLoader: getLoader,
  getHandler: getHandler
};

var MyAwesomeContractContract = {
  AwesomeEvent: AwesomeEvent
};

exports.mapFunctionRegisterName = mapFunctionRegisterName;
exports.hasPrintedWarning = hasPrintedWarning;
exports.getDefaultLoaderHandler = getDefaultLoaderHandler;
exports.MyAwesomeContractContract = MyAwesomeContractContract;
/* hasPrintedWarning Not a pure module */
