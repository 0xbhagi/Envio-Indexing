// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Spice = require("@greenlabs/ppx-spice/src/rescript/Spice.bs.js");
var Ethers = require("./bindings/Ethers.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var id_encode = Spice.stringToJson;

var id_decode = Spice.stringFromJson;

var nullable_encode = Spice.optionToJson;

var nullable_decode = Spice.optionFromJson;

function awesomeEntityEntity_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "id",
                    false,
                    Spice.stringToJson(v.id)
                  ],
                  [
                    "awesomeAddress",
                    false,
                    Spice.stringToJson(v.awesomeAddress)
                  ],
                  [
                    "awesomeTotal",
                    false,
                    Ethers.$$BigInt.t_encode(v.awesomeTotal)
                  ]
                ]));
}

function awesomeEntityEntity_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var id = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "id"), null));
  if (id.TAG === /* Ok */0) {
    var awesomeAddress = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "awesomeAddress"), null));
    if (awesomeAddress.TAG === /* Ok */0) {
      var awesomeTotal = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "awesomeTotal"), null));
      if (awesomeTotal.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  id: id._0,
                  awesomeAddress: awesomeAddress._0,
                  awesomeTotal: awesomeTotal._0
                }
              };
      }
      var e = awesomeTotal._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".awesomeTotal" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = awesomeAddress._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".awesomeAddress" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = id._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".id" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

function eventArgs_encode(v) {
  return Js_dict.fromArray(Spice.filterOptional([
                  [
                    "identifier",
                    false,
                    Spice.stringToJson(v.identifier)
                  ],
                  [
                    "awesomeAddress",
                    false,
                    Ethers.ethAddress_encode(v.awesomeAddress)
                  ],
                  [
                    "awesomeValue",
                    false,
                    Ethers.$$BigInt.t_encode(v.awesomeValue)
                  ]
                ]));
}

function eventArgs_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Spice.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Spice.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var identifier = Spice.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "identifier"), null));
  if (identifier.TAG === /* Ok */0) {
    var awesomeAddress = Ethers.ethAddress_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "awesomeAddress"), null));
    if (awesomeAddress.TAG === /* Ok */0) {
      var awesomeValue = Ethers.$$BigInt.t_decode(Belt_Option.getWithDefault(Js_dict.get(dict$1, "awesomeValue"), null));
      if (awesomeValue.TAG === /* Ok */0) {
        return {
                TAG: /* Ok */0,
                _0: {
                  identifier: identifier._0,
                  awesomeAddress: awesomeAddress._0,
                  awesomeValue: awesomeValue._0
                }
              };
      }
      var e = awesomeValue._0;
      return {
              TAG: /* Error */1,
              _0: {
                path: ".awesomeValue" + e.path,
                message: e.message,
                value: e.value
              }
            };
    }
    var e$1 = awesomeAddress._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".awesomeAddress" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var e$2 = identifier._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".identifier" + e$2.path,
            message: e$2.message,
            value: e$2.value
          }
        };
}

var AwesomeEventEvent = {
  eventArgs_encode: eventArgs_encode,
  eventArgs_decode: eventArgs_decode
};

var MyAwesomeContractContract = {
  AwesomeEventEvent: AwesomeEventEvent
};

function myAwesomeContractContract_AwesomeEvent(param_0) {
  return /* MyAwesomeContractContract_AwesomeEvent */{
          _0: param_0
        };
}

function eventName_encode(v) {
  return "MyAwesomeContractContract_AwesomeEventEvent";
}

function eventName_decode(v) {
  var str = Js_json.classify(v);
  if (typeof str === "number" || str.TAG !== /* JSONString */0) {
    return Spice.error(undefined, "Not a JSONString", v);
  } else if ("MyAwesomeContractContract_AwesomeEventEvent" === str._0) {
    return {
            TAG: /* Ok */0,
            _0: /* MyAwesomeContractContract_AwesomeEventEvent */0
          };
  } else {
    return Spice.error(undefined, "Not matched", v);
  }
}

function eventNameToString(eventName) {
  return "AwesomeEvent";
}

exports.id_encode = id_encode;
exports.id_decode = id_decode;
exports.nullable_encode = nullable_encode;
exports.nullable_decode = nullable_decode;
exports.awesomeEntityEntity_encode = awesomeEntityEntity_encode;
exports.awesomeEntityEntity_decode = awesomeEntityEntity_decode;
exports.MyAwesomeContractContract = MyAwesomeContractContract;
exports.myAwesomeContractContract_AwesomeEvent = myAwesomeContractContract_AwesomeEvent;
exports.eventName_encode = eventName_encode;
exports.eventName_decode = eventName_decode;
exports.eventNameToString = eventNameToString;
/* Ethers Not a pure module */
