// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Config = require("./Config.bs.js");
var Logging = require("./Logging.bs.js");
var $$Promise = require("@ryyppy/rescript-promise/src/Promise.bs.js");
var Process = require("process");
var Postgres = require("postgres");
var TrackTables = require("./TrackTables.bs.js");

var sql = Postgres(Config.db);

async function createEventTypeEnum(param) {
  await (sql`
      DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_type') THEN
          CREATE TYPE EVENT_TYPE AS ENUM(
          'MyAwesomeContractContract_AwesomeEventEvent'
          );
        END IF;
      END $$;
      `);
}

async function createRawEventsTable(param) {
  await createEventTypeEnum(undefined);
  await (sql`
      CREATE TABLE IF NOT EXISTS public.raw_events (
        chain_id INTEGER NOT NULL,
        event_id NUMERIC NOT NULL,
        block_number INTEGER NOT NULL,
        log_index INTEGER NOT NULL,
        transaction_index INTEGER NOT NULL,
        transaction_hash TEXT NOT NULL,
        src_address TEXT NOT NULL,
        block_hash TEXT NOT NULL,
        block_timestamp INTEGER NOT NULL,
        event_type EVENT_TYPE NOT NULL,
        params JSON NOT NULL,
        db_write_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (chain_id, event_id)
      );
      `);
}

async function dropRawEventsTable(param) {
  await (sql`
      DROP TABLE IF EXISTS public.raw_events;
    `);
  await (sql`
      DROP TYPE IF EXISTS EVENT_TYPE CASCADE;
    `);
}

var RawEventsTable = {
  createEventTypeEnum: createEventTypeEnum,
  createRawEventsTable: createRawEventsTable,
  dropRawEventsTable: dropRawEventsTable
};

async function createDynamicContractRegistryTable(param) {
  await (sql`
      DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'contract_type') THEN
          CREATE TYPE CONTRACT_TYPE AS ENUM (
          'MyAwesomeContract'
          );
        END IF;
      END $$;
      `);
  await (sql`
      CREATE TABLE IF NOT EXISTS public.dynamic_contract_registry (
        chain_id INTEGER NOT NULL,
        event_id NUMERIC NOT NULL,
        contract_address TEXT NOT NULL,
        contract_type CONTRACT_TYPE NOT NULL,
        PRIMARY KEY (chain_id, contract_address)
      );
      `);
}

async function dropDynamicContractRegistryTable(param) {
  await (sql`
      DROP TABLE IF EXISTS public.dynamic_contract_registry;
    `);
  await (sql`
      DROP TYPE IF EXISTS EVENT_TYPE CASCADE;
    `);
}

var DynamicContractRegistryTable = {
  createDynamicContractRegistryTable: createDynamicContractRegistryTable,
  dropDynamicContractRegistryTable: dropDynamicContractRegistryTable
};

async function createAwesomeEntityTable(param) {
  return await (sql`
      CREATE TABLE \"public\".\"awesomeEntity\"(\"id\" text NOT NULL,\"awesomeAddress\" text NOT NULL,\"awesomeTotal\" numeric NOT NULL, 
        event_chain_id INTEGER NOT NULL, 
        event_id NUMERIC NOT NULL, 
        db_write_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
        PRIMARY KEY (\"id\"));`);
}

async function deleteAwesomeEntityTable(param) {
  return await (sql`DROP TABLE IF EXISTS \"public\".\"awesomeEntity\";`);
}

var AwesomeEntity = {
  createAwesomeEntityTable: createAwesomeEntityTable,
  deleteAwesomeEntityTable: deleteAwesomeEntityTable
};

async function deleteAllTables(param) {
  Logging.trace("Dropping all tables");
  return await (sql.unsafe`DROP SCHEMA public CASCADE;CREATE SCHEMA public;GRANT ALL ON SCHEMA public TO postgres;GRANT ALL ON SCHEMA public TO public;`);
}

async function deleteAllTablesExceptRawEventsAndDynamicContractRegistry(param) {
  return await (sql.unsafe`
    DO $$ 
    DECLARE
        table_name_var text;
    BEGIN
        FOR table_name_var IN (SELECT table_name
                           FROM information_schema.tables
                           WHERE table_schema = 'public'
                           AND table_name != 'raw_events'
                           AND table_name != 'dynamic_contract_registry') 
        LOOP
            EXECUTE 'DROP TABLE IF EXISTS ' || table_name_var || ' CASCADE';
        END LOOP;
    END $$;
  `);
}

async function runUpMigrations(shouldExit) {
  var exitCode = {
    contents: /* Success */0
  };
  await $$Promise.$$catch(createRawEventsTable(undefined), (function (err) {
          exitCode.contents = /* Failure */1;
          return Promise.resolve(Logging.errorWithExn(err, "EE800: Error creating raw events table"));
        }));
  await $$Promise.$$catch(createDynamicContractRegistryTable(undefined), (function (err) {
          exitCode.contents = /* Failure */1;
          return Promise.resolve(Logging.errorWithExn(err, "EE801: Error creating dynamic contracts table"));
        }));
  await $$Promise.$$catch(createAwesomeEntityTable(undefined), (function (err) {
          exitCode.contents = /* Failure */1;
          return Promise.resolve(Logging.errorWithExn(err, "EE802: Error creating AwesomeEntity table"));
        }));
  await $$Promise.$$catch(TrackTables.trackAllTables(undefined), (function (err) {
          return Promise.resolve(Logging.errorWithExn(err, "EE803: Error tracking tables"));
        }));
  if (shouldExit) {
    Process.exit(exitCode.contents);
  }
  return exitCode.contents;
}

async function runDownMigrations(shouldExit, shouldDropRawEvents) {
  var exitCode = {
    contents: /* Success */0
  };
  if (shouldDropRawEvents) {
    await $$Promise.$$catch(deleteAllTables(undefined), (function (err) {
            exitCode.contents = /* Failure */1;
            return Promise.resolve(Logging.errorWithExn(err, "EE804: Error dropping entity tables"));
          }));
  } else {
    await $$Promise.$$catch(deleteAllTablesExceptRawEventsAndDynamicContractRegistry(undefined), (function (err) {
            exitCode.contents = /* Failure */1;
            return Promise.resolve(Logging.errorWithExn(err, "EE805: Error dropping entity tables except for raw events"));
          }));
  }
  if (shouldExit) {
    Process.exit(exitCode.contents);
  }
  return exitCode.contents;
}

async function setupDb(shouldDropRawEvents) {
  Logging.info("Provisioning Database");
  var exitCodeDown = await runDownMigrations(false, shouldDropRawEvents);
  var exitCodeUp = await runUpMigrations(false);
  var exitCode = exitCodeDown || exitCodeUp ? /* Failure */1 : /* Success */0;
  Process.exit(exitCode);
}

exports.sql = sql;
exports.RawEventsTable = RawEventsTable;
exports.DynamicContractRegistryTable = DynamicContractRegistryTable;
exports.AwesomeEntity = AwesomeEntity;
exports.deleteAllTables = deleteAllTables;
exports.deleteAllTablesExceptRawEventsAndDynamicContractRegistry = deleteAllTablesExceptRawEventsAndDynamicContractRegistry;
exports.runUpMigrations = runUpMigrations;
exports.runDownMigrations = runDownMigrations;
exports.setupDb = setupDb;
/* sql Not a pure module */
